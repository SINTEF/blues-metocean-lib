# This an autogenerated file
# 
# Generated with DatasetVariable
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.datasetvariable import DatasetVariableBlueprint
from typing import Dict
from dmt.namedentity import NamedEntity

class DatasetVariable(NamedEntity):
    """
    Keyword arguments
    -----------------
    description : str
         (default None)
    name : str
         (default None)
    unit : str
         (default None)
    dimensions : str
         (default None)
    """

    def __init__(self , **kwargs):
        super().__init__(**kwargs)
        self.description = None
        self.name = None
        self.unit = None
        self.dimensions = None
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return DatasetVariableBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = value

    @property
    def unit(self) -> str:
        """"""
        return self.__unit

    @unit.setter
    def unit(self, value: str):
        """Set unit"""
        self.__unit = value

    @property
    def dimensions(self) -> str:
        """"""
        return self.__dimensions

    @dimensions.setter
    def dimensions(self, value: str):
        """Set dimensions"""
        self.__dimensions = value
