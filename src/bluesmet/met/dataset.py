# This an autogenerated file
# 
# Generated with Dataset
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.dataset import DatasetBlueprint
from numpy import ndarray,asarray
from dmt.namedentity import NamedEntity
from .datasetvariable import DatasetVariable

class Dataset(NamedEntity):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    name : str
         (default None)
    fromDate : str
         (default None)
    url : str
         (default None)
    latitudes : ndarray
    longitudes : ndarray
    variables : List[DatasetVariable]
    """

    def __init__(self , description="", **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.name = None
        self.fromDate = None
        self.url = None
        self.latitudes = ndarray(1)
        self.longitudes = ndarray(1)
        self.variables = list()
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return DatasetBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = value

    @property
    def fromDate(self) -> str:
        """"""
        return self.__fromDate

    @fromDate.setter
    def fromDate(self, value: str):
        """Set fromDate"""
        self.__fromDate = value

    @property
    def url(self) -> str:
        """"""
        return self.__url

    @url.setter
    def url(self, value: str):
        """Set url"""
        self.__url = value

    @property
    def latitudes(self) -> ndarray:
        """"""
        return self.__latitudes

    @latitudes.setter
    def latitudes(self, value: ndarray):
        """Set latitudes"""
        self.__latitudes = asarray(value)

    @property
    def longitudes(self) -> ndarray:
        """"""
        return self.__longitudes

    @longitudes.setter
    def longitudes(self, value: ndarray):
        """Set longitudes"""
        self.__longitudes = asarray(value)

    @property
    def variables(self) -> List[DatasetVariable]:
        """"""
        return self.__variables

    @variables.setter
    def variables(self, value: List[DatasetVariable]):
        """Set variables"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__variables = value
