# This an autogenerated file
# 
# Generated with DatasetContainer
from __future__ import annotations
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.datasetcontainer import DatasetContainerBlueprint
from dmt.namedentity import NamedEntity
from .dataset import Dataset

class DatasetContainer(NamedEntity):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    name : str
         (default None)
    containers : List[DatasetContainer]
    datasets : List[Dataset]
    """

    def __init__(self , description="", **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.name = None
        self.containers = list()
        self.datasets = list()
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return DatasetContainerBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = value

    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = value

    @property
    def containers(self) -> List[DatasetContainer]:
        """"""
        return self.__containers

    @containers.setter
    def containers(self, value: List[DatasetContainer]):
        """Set containers"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__containers = value

    @property
    def datasets(self) -> List[Dataset]:
        """"""
        return self.__datasets

    @datasets.setter
    def datasets(self, value: List[Dataset]):
        """Set datasets"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__datasets = value
